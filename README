Title Page
     Software Version Description

     for

      File::FileUtil - Generic file utilites developed originally for Test::STDmaker and ExtUtils::SVDmaker

     Revision: A

     Version: 0.02

     Date: 2003/07/26

     Prepared for: General Public 

     Prepared by:  SoftwareDiamonds.com E<lt>support@SoftwareDiamonds.comE<gt>

     Copyright: copyright © 2003 Software Diamonds

     Classification: NONE

1.0 SCOPE
    This paragraph identifies and provides an overview of the released
    files.

  1.1 Identification
    This release, identified in 3.2, is a collection of Perl modules that
    extend the capabilities of the Perl language.

  1.2 System overview
    The test software is traditionally not part of the Perl lib subtree
    since it is usually of little concern to the end-user. The normal run
    environment does not support loading test program modules outside the
    lib subtrees.

    This module provides methods to access program modules and other files
    in the test subtree.

  1.3 Document overview.
    This document releases File::TestPath version 0.02 providing a
    description of the inventory, installation instructions and other
    information necessary to utilize and track this release.

3.0 VERSION DESCRIPTION
    All file specifications in this SVD use the Unix operating system file
    specification.

  3.1 Inventory of materials released.
    This document releases the file found at the following repository(s):

       http://www.softwarediamonds/packages/File-TestPath-0.02
       http://www.perl.com/CPAN-local/authors/id/S/SO/SOFTDIA/File-TestPath-0.02

    Restrictions regarding duplication and license provisions are as
    follows:

    Copyright.
        copyright © 2003 Software Diamonds

    Copyright holder contact.
         603 882-0846 E<lt>support@SoftwareDiamonds.comE<gt>

    License.
        Software Diamonds permits the redistribution and use in source and
        binary forms, with or without modification, provided that the
        following conditions are met:

        1   Redistributions of source code, modified or unmodified must
            retain the above copyright notice, this list of conditions and
            the following disclaimer.

        2   Redistributions in binary form must reproduce the above
            copyright notice, this list of conditions and the following
            disclaimer in the documentation and/or other materials provided
            with the distribution.

        SOFTWARE DIAMONDS, http://www.SoftwareDiamonds.com, PROVIDES THIS
        SOFTWARE 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
        BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
        FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
        SOFTWARE DIAMONDS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        SPECIAL,EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
        USE,DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING USE OF THIS SOFTWARE, EVEN IF ADVISED OF
        NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE POSSIBILITY
        OF SUCH DAMAGE.

  3.2 Inventory of software contents
    The content of the released, compressed, archieve file, consists of the
    following files:

     file                                                         version date       comment
     ------------------------------------------------------------ ------- ---------- ------------------------
     lib/Docs/Site_SVD/File_TestPath.pm                           0.02    2003/07/26 revised 0.01
     MANIFEST                                                     0.02    2003/07/26 generated, replaces 0.01
     Makefile.PL                                                  0.02    2003/07/26 generated, replaces 0.01
     README                                                       0.02    2003/07/26 generated, replaces 0.01
     lib/File/TestPath.pm                                         1.11    2003/07/26 revised 1.1
     t/File/TestPath.t                                            0.08    2003/07/26 revised 0.07
     tlib/File/Package.pm                                         1.1     2003/07/26 new

  3.3 Changes
    Removed the methods for addressing test path directories from the
    "File::FileUtil" module to this module The module name is now much more
    descriptive of the routines in the module.

    Changes to past revisions are as follows:

    Test-TestUtil-0.01
        Originated

    Test-TestUtil-0.02
        Correct failure from Josts Smokehouse"
        <Jost.Krieger+smokeback@ruhr-uni-bochum.de> test run

        t/Test/TestUtil/TestUtil....Bareword "fspec_dirs" not allowed while
        "strict subs" in use at

          /net/sunu991/disc1/.cpanplus/5.8.0/build/Test-TestUtil-0.01/blib/lib/Test/TestUtil.pm line 56.

        Changed line 56 from

         my @dirs = (fspec_dirs) ? $from_package->splitdir( $fspec_dirs ) : ();

        to

         my @dirs = ($fspec_dirs) ? $from_package->splitdir( $fspec_dirs ) : ();

        This error is troublesome since the test passed on my system using
        Active Perl under Microsoft NT. It should never have passed. This
        error is in a core method, *fspec2fspec*, that changes file
        specifications from one operating system to another operating
        system. This method has been in service unchanged for some time.

    Test-TestUtil-0.03
        Correct failure from Josts Smokehouse"
        <Jost.Krieger+smokeback@ruhr-uni-bochum.de> test run

        PERL_DL_NONLAZY=1 /usr/local/perl/bin/perl "-MExtUtils::Command::MM"
        "-e" "test_harness(0, 'blib/lib', 'blib/arch')"
        t/Test/TestUtil/TestUtil.t t/Test/TestUtil/TestUtil....# Test 18
        got: '$VAR1 = ''; ' (t/Test/TestUtil/TestUtil.t at line 540 fail
        #17) # Expected: '$VAR1 = '\\=head1 Title Page

        The *pm2datah* method is not returning any data for Test 18. This
        will also cause the test of *pm2data*, test 19 to fail. The
        *pm2datah* is searching for the string "\n__DATA__\n".

        The "\n" character on Perl is a logical end of line character
        sequence. The "\n" end of line is different on Mr. Smokehouse's Unix
        operating system than on my Windows NT operating system. The test
        file was created under MSWin32 and uses a MSWin32 "\n". Under UNIX,
        *pm2datah* method will look for the Unix "\n" and there will not be
        any.

        Changed "\n__DATA__\n" to /[\012\015]__DATA__/.

        During the clean-up for CPAN, broke the *format_hash_table* method
        for tables in hash of hash format. Fixed the break, added test 29 to
        the *t/Test/TestUtil/TestUtil.t* test script for this feature, and
        added a discusssion of this feature in POD discription for
        *format_hash_table*

    Test-TestUtil-0.04
        item our old friend visits again - DOS and UNIX text file
        incompatibility

        This impacts other modules. We have to examine all modules for this
        portability defect and correct any found defects.

        Correct failure from Josts Smokehouse"
        <Jost.Krieger+smokeback@ruhr-uni-bochum.de> and Kingpin
        <mthurn@carbon> test runs.

        On Mr. Smokehouse's run email the got: VAR1 clearly showed extra
        white space line that is not present in the expected: VAR1. In Mr.
        Kingpin's run the got: VAR1 and expected: VAR1 look visually the
        same. However, the Unix found a difference(s) and failed the test.

        For Mr. Smokehouse's run:

        PERL_DL_NONLAZY=1 /usr/local/bin/perl "-MExtUtils::Command::MM" "-e"
        "test_harness(0, 'blib/lib', 'blib/arch')"
        t/Test/TestUtil/TestUtil.t t/Test/TestUtil/TestUtil....NOK 18# Test
        18 got: '$VAR1 = '\\=head1 Title Page

         Software Version Description

         for

          File::FileUtil - Generic file utilites developed originally for Test::STDmaker and ExtUtils::SVDmaker

         Revision: A

        [snip]

        (t/Test/TestUtil/TestUtil.t at line 565 fail #17) # Expected: '$VAR1
        = '\\=head1 Title Page

         Software Version Description

         for

          File::FileUtil - Generic file utilites developed originally for Test::STDmaker and ExtUtils::SVDmaker

        What we have before, was a totally "failure to communicate." aka
        Cool Hand Luke. VAR1 was empty. Now VAR1 has something. It is not
        completely dead. One probable cause is the Unix operating system
        must be producing two Unix \012 new lines for a Microsoft single
        newline \015\012. Without being able to examine the test with a
        debugger, the only way to verify this is to provide the fix and see
        if the problem goes away when this great group of testers try for
        the fourth time.

        Revised *fin* method to take a handle, change *pm2datah* method
        handle, *$fh*, to binary by adding a *binmode $fh* statement, and
        pass the actual thru the *fin* method for test 18.

        Use *fin($fh)* to read in the data for *pm2data*, test 19 Unit Under
        Test (UUT), instead of using the raw file handle.

        The *fin* method takes any \015\012 combination and changes it into
        the logical Perl new line, *"\n"*, for the current operating system.

    File-FileUtil-0.01

        *   At 02:44 AM 6/14/2003 +0200, Max Maischein wrote: A second thing
            that I would like you to reconsider is the naming of
            "Test::TestUtil" respectively "Test::Tech" - neither of those is
            descriptive of what the routines actually do or what the module
            implements. I would recommend renaming them to something closer
            to your other modules, maybe "Test::SVDMaker::Util" and
            "Test::SVDMaker::Tech", as some routines do not seem to be
            specific to the Test::-suite but rather general
            (format_array_table). Some parts (the "scrub" routines) might
            even better live in another module namespace,
            "Test::Util::ScrubData" or something like that.

            Broke away all the file related methods from Test::TestUtil and
            created this module File::FileUtil so the module name is more
            descriptive of the methods within the module.

        *   Broke the smart nl code out of the fin method and made it is own
            separate method, smart_nl method.

            At 02:44 AM 6/14/2003 +0200, Max Maischein wrote: Perl, as Perl
            already does smart newline handling, (even though with the
            advent of 5.8 even Unix-people have to learn the word "binmode"
            now :-))

            The only place where I see Perl does smart newline handling is
            the crlf IO displine introduce in Perl 5.6. The File::FileUtil
            has a use 5.001 so that 5.6 Perl built-ins cannot be used. Added
            comment to smart_nl that for users with 5.6 Perl that it may be
            better to use the built-in crlf IO discipline.

        *   For the load_package method that uses a eval "require $package"
            to load the package, the $@ does not capture all the warnings
            and error messages, at least not with ActiveState Perl. Added
            code the captures also the warnings, by temporaily reassigning
            $SIG(__WARN__), and added these to the $@ error messages.

        *   Added two new tests to verify the NOGO paths for the for the
            load_package method. One tests for load module failure looking
            for all the possilbe information on why the module did not load.
            The other verifies that the vocabulary is present after the
            loading the module. This information is very helpful when you
            must remote debug a load failure from CPAN testing whose is
            running on a different platform.

    File-FileUtil-0.02
        Added the method *hex_dump*.

    File-FileUtil-0.03

        test_lib2inc
            Returns to parent directory of the first t directory going up
            from the test script instead of the t directory.

        find_t_roots
            Added the function find_t_roots that returns the parent
            directory of all the directories in @INC

    File-TestPath-0.01
        Broke up File::FileUtil into set of program modules whose name more
        closely describes the features of the functions.

    File-TestPath-0.02
        Added tlib to the test path.

        Change the test so that test support program modules resides in
        distribution directory tlib directory instead of the lib directory.
        Because they are no longer in the lib directory, test support files
        will not be installed as a pre-condition for the test of this
        module. The test of this module will precede immediately. The test
        support files in the tlib directory will vanish after the
        installtion.

  3.4 Adaptation data.
    This installation requires that the installation site has the Perl
    programming language installed. There are no other additional
    requirements or tailoring needed of configurations files, adaptation
    data or other software needed for this installation particular to any
    installation site.

  3.5 Related documents.
    There are no related documents needed for the installation and test of
    this release.

  3.6 Installation instructions.
    Instructions for installation, installation tests and installation
    support are as follows:

    Installation Instructions.
        To installed the release file, use the CPAN module in the Perl
        release or the INSTALL.PL script at the following web site:

         http://packages.SoftwareDiamonds.com

        Follow the instructions for the the chosen installation software.

        The distribution file is at the following respositories:

           http://www.softwarediamonds/packages/File-TestPath-0.02
           http://www.perl.com/CPAN-local/authors/id/S/SO/SOFTDIA/File-TestPath-0.02

    Prerequistes.
         None.

    Security, privacy, or safety precautions.
        None.

    Installation Tests.
        Most Perl installation software will run the following test
        script(s) as part of the installation:

         t/File/TestPath.t

    Installation support.
        If there are installation problems or questions with the
        installation contact

         603 882-0846 E<lt>support@SoftwareDiamonds.comE<gt>

  3.7 Possible problems and known errors
    There is still much work needed to ensure the quality of this module as
    follows:

    *   State the functional requirements for each method including not only
        the GO paths but also what to expect for the NOGO paths

    *   All the tests are GO path tests. Should add NOGO tests.

    *   Add the requirements addressed as *# R: * comment to the tests

4.0 NOTES
    The following are useful acronyms:

    .d  extension for a Perl demo script file

    .pm extension for a Perl Library Module

    .t  extension for a Perl test script file

    POD Plain Old Documentation

2.0 SEE ALSO
    File::TestPath
    Docs::US_DOD::SVD

